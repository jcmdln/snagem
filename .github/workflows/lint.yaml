# SPDX-License-Identifier: AGPL-3.0-or-later
---
name: Lint

on:
  pull_request:
    paths:
      - .github/workflows/lint.yaml
      - poetry.lock
      - pyproject.toml
      - setup.cfg
      - snagctl/**/*.py
      - snagd/**/*.py
      - snagd/db/alembic/script.py.mako
  push:
    paths:
      - .github/workflows/lint.yaml
      - poetry.lock
      - pyproject.toml
      - setup.cfg
      - snagctl/**/*.py
      - snagd/**/*.py
      - snagd/db/alembic/script.py.mako
  workflow_dispatch:

jobs:
  lint:
    strategy:
      matrix:
        os: [Ubuntu-20.04]
        python-version: ["3.10"]
        include:
          - name: bandit
          - name: flake8
          - name: mypy

    name: ${{ matrix.os }} ${{ matrix.python-version }} ${{ matrix.suffix }}
    runs-on: ${{ matrix.image }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Check cache health
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install system package dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git libpq-dev libsqlite3-dev python3-dev python3-wheel

      - name: Install python package dependencies
        run: |
          python${{ matrix.python-version }} -m venv --upgrade-deps .venv
          source .venv
          # FIXME: poetry>=1.2,<2 once released
          pip install poetry==1.2.0b1
          poetry install --only tox

      - name: Run ${{ matrix.name }}
        run: poetry run tox -e ${{ matrix.name }}
